image: node:10

variables:
  DOCKER_HUB_IMAGE: satoshipay/multisig-coordinator
  DOCKER_VERSION: 20.10.2
  CI_APPLICATION_TAG: $CI_COMMIT_SHA
  CI_APPLICATION_REPOSITORY: ${CONTAINER_REGISTRY_PREFIX}/${CI_PROJECT_NAME}/${CI_COMMIT_REF_SLUG}
  INGRESS_CLASS: auxiliary

stages:
  - setup
  - test
  - build
  - publish
# We cannot easily deploy from GitLab right now. Go to Google Cloud Run, pick the staging or production
# project and deploy a new revision after manually selecting the docker image.

prepare:
  stage: setup
  variables:
    npm_config_cache: $CI_PROJECT_DIR/cache
  cache:
    key: npm-${CI_COMMIT_REF_SLUG}
    paths:
      - cache/
  script:
    - npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}
    - npm ci
  artifacts:
    paths:
      - node_modules
    expire_in: 1 hour

lint:
  stage: test
  script:
    - npm run prettier
    - npm run lint

test:
  stage: test
  variables:
    POSTGRES_USER: postgres
    POSTGRES_DB: postgres
    POSTGRES_PASSWORD: postgres
  before_script:
    - apt update && apt install -y postgresql-client || true
    - cp test.env .env
    - cat migrations/*.sql | psql "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost:5432/${POSTGRES_DB}"
  services:
   - name: postgres:11.0-alpine
  script:
    - npm run test:ci
  artifacts:
    reports:
      junit: ava.xml

build:
  stage: build
  script:
    - npm run build
  artifacts:
    paths:
      - build
    expire_in: 1 week

publish:
  stage: publish
  image:
    name: gcr.io/kaniko-project/executor:debug-v0.13.0
    entrypoint: [""]
  script:
    - |
      /kaniko/executor --context ${CI_PROJECT_DIR} --dockerfile ${CI_PROJECT_DIR}/docker/Dockerfile \
        --destination ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG} \
        --destination ${CI_APPLICATION_REPOSITORY}:latest
