apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "signature-coordinator.fullname" . }}
  labels:
    app: {{ template "signature-coordinator.name" . }}
    chart: {{ template "signature-coordinator.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "signature-coordinator.name" . }}
      release: {{ .Release.Name }}
  # remove this key if it is unacceptable to have two instances *ever* running
  strategy:
    rollingUpdate:
      maxSurge: 35%
      maxUnavailable: 35%
  template:
    metadata:
      labels:
        app: {{ template "signature-coordinator.name" . }}
        release: {{ .Release.Name }}
    spec:
      # Uncomment this to use mongo or redis (delete as appropriate)
      # initContainers:
      #   - name: init-mongo
      #     image: mongo:3.2
      #     command: ['sh', '-c', 'until mongo --eval "db.adminCommand(\"ping\")" --host {{ .Release.Name }}-mongodb; do echo "waiting for mongo"; sleep 2; done;']
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: BASE_URL
              value: {{ .Values.environment.baseUrl }}
{{- if .Values.environment.databaseUrl }}
            - name: DATABASE
              value: {{ .Values.environment.databaseUrl }}
{{- else }}
            - name: DATABASE
              value: postgresql://{{ .Values.postgresql.postgresqlUsername }}:{{ default "xxxx" .Values.postgresql.postgresqlPassword }}@{{ .Release.Name }}-postgresql/{{ .Values.postgresql.postgresqlDatabase }}
{{- end }}
{{- if not .Values.postgresql.postgresqlPassword }}
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgresql
                  key: postgresql-password
{{- end }}
            - name: PORT
              value: "3000"
            - name: HORIZON
              value: {{ .Values.environment.mainnetHorizonUrl }}
            - name: HORIZON_TESTNET
              value: {{ .Values.environment.testnetHorizonUrl }}
          ports:
            - name: http-api
              containerPort: 3000
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: {{ .Values.ingress.path | trimSuffix "/"}}/
          #     port: http-api
          # readinessProbe:
          #   httpGet:
          #     path: {{ .Values.ingress.path | trimSuffix "/"}}/
          #     port: http-api
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
